

import React, { useState, useMemo } from 'react';
import { 
  Search, 
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  Package,
  Plus,
  Edit,
  Trash2,
  X,
  AlertTriangle,
  Save,
  RefreshCw,
  Download
} from 'lucide-react';
import ExportButton from '../ExportButton';

const StockIn = () => {
  // Sample stock data - replace with your actual data
  const [stockData] = useState([
    {
      id: 1,
      productName: 'Electric Meter',
      productDetails: 'Digital smart meter with WiFi connectivity, LCD display, and remote monitoring capabilities',
      quantity: 150,
      category: 'Electronics',
      minStockLevel: 20
    },
    {
      id: 2,
      productName: 'Water Pipes',
      productDetails: 'PVC pipes for water supply, 1 inch diameter, 10 feet length, corrosion resistant',
      quantity: 75,
      category: 'Plumbing',
      minStockLevel: 15
    },
    {
      id: 3,
      productName: 'Door Locks',
      productDetails: 'Heavy duty mortise locks with 5 lever mechanism, anti-pick technology',
      quantity: 45,
      category: 'Hardware',
      minStockLevel: 10
    },
    {
      id: 4,
      productName: 'LED Bulbs',
      productDetails: '12W LED energy saving bulbs, warm white light, B22 base, 2 year warranty',
      quantity: 200,
      category: 'Electronics',
      minStockLevel: 50
    },
    {
      id: 5,
      productName: 'Cable Wires',
      productDetails: 'Copper electrical wires, 2.5mm thickness, fire resistant coating, 100 meter roll',
      quantity: 30,
      category: 'Electrical',
      minStockLevel: 5
    },
    {
      id: 6,
      productName: 'Paint Brushes',
      productDetails: 'Professional paint brushes set, various sizes, synthetic bristles, ergonomic handle',
      quantity: 60,
      category: 'Tools',
      minStockLevel: 12
    },
    {
      id: 7,
      productName: 'Faucets',
      productDetails: 'Chrome finished bathroom faucets, single handle design, water saving aerator',
      quantity: 25,
      category: 'Plumbing',
      minStockLevel: 8
    },
    {
      id: 8,
      productName: 'Floor Tiles',
      productDetails: 'Ceramic floor tiles, 2x2 feet, anti-slip surface, suitable for wet areas',
      quantity: 120,
      category: 'Construction',
      minStockLevel: 25
    }
  ]);

  // State management
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(5);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [stock, setStock] = useState(stockData);
  
  // Modal states
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  
  // Form state
  const [formData, setFormData] = useState({
    productName: '',
    productDetails: '',
    quantity: '',
    category: '',
    minStockLevel: ''
  });

  // Get unique categories for filter
  const categories = [...new Set(stock.map(item => item.category))];

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      productName: '',
      productDetails: '',
      quantity: '',
      category: '',
      minStockLevel: ''
    });
  };

  // Handle Add Product
  const handleAddProduct = () => {
    setShowAddModal(true);
    resetForm();
  };

  const submitAdd = () => {
    if (formData.productName && formData.quantity) {
      const newProduct = {
        id: Date.now(), // In real app, this would be generated by backend
        productName: formData.productName,
        productDetails: formData.productDetails,
        quantity: parseInt(formData.quantity),
        category: formData.category,
        minStockLevel: parseInt(formData.minStockLevel) || 0
      };
      setStock(prev => [...prev, newProduct]);
      setShowAddModal(false);
      resetForm();
    }
  };

  // Handle Edit Product
  const handleEditProduct = (item) => {
    setSelectedItem(item);
    setFormData({
      productName: item.productName,
      productDetails: item.productDetails,
      quantity: item.quantity.toString(),
      category: item.category,
      minStockLevel: item.minStockLevel.toString()
    });
    setShowEditModal(true);
  };

  const submitEdit = () => {
    if (selectedItem && formData.productName && formData.quantity) {
      setStock(prev => prev.map(item => 
        item.id === selectedItem.id 
          ? {
              ...item,
              productName: formData.productName,
              productDetails: formData.productDetails,
              quantity: parseInt(formData.quantity),
              category: formData.category,
              minStockLevel: parseInt(formData.minStockLevel) || 0
            }
          : item
      ));
      setShowEditModal(false);
      setSelectedItem(null);
      resetForm();
    }
  };

  // Handle Delete Product
  const handleDeleteProduct = (item) => {
    setSelectedItem(item);
    setShowDeleteModal(true);
  };

  const confirmDelete = () => {
    if (selectedItem) {
      setStock(prev => prev.filter(item => item.id !== selectedItem.id));
    }
    setShowDeleteModal(false);
    setSelectedItem(null);
  };

  // Close modals
  const closeModals = () => {
    setShowAddModal(false);
    setShowEditModal(false);
    setShowDeleteModal(false);
    setSelectedItem(null);
    resetForm();
  };

  // Filtered and sorted data
  const filteredAndSortedData = useMemo(() => {
    let filtered = stock.filter(item => {
      const matchesSearch = 
        item.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.productDetails.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.category.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesCategory = categoryFilter === 'all' || item.category === categoryFilter;

      return matchesSearch && matchesCategory;
    });

    // Sort data
    if (sortConfig.key) {
      filtered.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
    }

    return filtered;
  }, [stock, searchTerm, categoryFilter, sortConfig]);

  // Pagination
  const totalPages = Math.ceil(filteredAndSortedData.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const paginatedData = filteredAndSortedData.slice(startIndex, startIndex + itemsPerPage);

  // Handle sort
  const handleSort = (key) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  // Stock level indicator
  const StockLevel = ({ quantity, minLevel }) => {
    if (quantity <= minLevel) {
      return <span className="px-2 py-1 text-xs font-medium bg-red-100 text-red-800 border border-red-200">Low Stock</span>;
    } else if (quantity <= minLevel * 2) {
      return <span className="px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 border border-yellow-200">Medium</span>;
    } else {
      return <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 border border-green-200">In Stock</span>;
    }
  };

  return (
    <div className="bg-white">
      {/* Add/Edit Modal */}
      {(showAddModal || showEditModal) && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <Package className="w-6 h-6 text-blue-500 mr-3" />
                <h3 className="text-lg font-semibold text-gray-900">
                  {showAddModal ? 'Add New Product' : 'Edit Product'}
                </h3>
              </div>
              <button onClick={closeModals} className="text-gray-400 hover:text-gray-600">
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Product Name *
                </label>
                <input
                  type="text"
                  name="productName"
                  value={formData.productName}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter product name"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Product Details
                </label>
                <textarea
                  name="productDetails"
                  value={formData.productDetails}
                  onChange={handleInputChange}
                  rows="3"
                  className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter product details"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Quantity *
                  </label>
                  <input
                    type="number"
                    name="quantity"
                    value={formData.quantity}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="0"
                    min="0"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Min Stock Level
                  </label>
                  <input
                    type="number"
                    name="minStockLevel"
                    value={formData.minStockLevel}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="0"
                    min="0"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Category
                </label>
                <select
                  name="category"
                  value={formData.category}
                  onChange={handleInputChange}
                  className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select category</option>
                  <option value="Electronics">Electronics</option>
                  <option value="Plumbing">Plumbing</option>
                  <option value="Hardware">Hardware</option>
                  <option value="Electrical">Electrical</option>
                  <option value="Tools">Tools</option>
                  <option value="Construction">Construction</option>
                </select>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={closeModals}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={showAddModal ? submitAdd : submitEdit}
                className="px-6 py-2 bg-blue-600 text-white font-medium hover:bg-blue-700 transition-colors flex items-center"
              >
                <Save className="w-4 h-4 mr-2" />
                {showAddModal ? 'Add Product' : 'Update Product'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 max-w-md w-full mx-4">
            <div className="flex items-center mb-4">
              <AlertTriangle className="w-6 h-6 text-red-500 mr-3" />
              <h3 className="text-lg font-semibold text-gray-900">Confirm Delete</h3>
            </div>
            
            <p className="text-gray-600 mb-6">
              {selectedItem && (
                <>
                  Are you sure you want to delete <strong>{selectedItem.productName}</strong>? 
                  This action cannot be undone.
                </>
              )}
            </p>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={closeModals}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={confirmDelete}
                className="px-6 py-2 bg-red-600 text-white font-medium hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Stock Management</h2>
            <p className="text-gray-600 mt-1">Manage inventory and track stock levels</p>
          </div>
          <div className="flex items-center space-x-3">
              <ExportButton data={stock} fileName="StockInData.xlsx" sheetName="Stock" />
            <button 
              onClick={handleAddProduct}
              className="bg-green-600 text-white px-4 py-2 hover:bg-green-700 transition-colors flex items-center"
            >
              <Plus className="w-4 h-4 mr-2" />
              Add Product
            </button>
          
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Search */}
          <div className="md:col-span-2">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search by product name, details, or category..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Category Filter */}
          <div>
            <select
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                onClick={() => handleSort('productName')}
              >
                <div className="flex items-center">
                  Product Name
                  <ChevronDown className="ml-1 w-4 h-4" />
                </div>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Product Details
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                onClick={() => handleSort('quantity')}
              >
                <div className="flex items-center">
                  Quantity
                  <ChevronDown className="ml-1 w-4 h-4" />
                </div>
              </th>
              <th 
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                onClick={() => handleSort('category')}
              >
                <div className="flex items-center">
                  Category
                  <ChevronDown className="ml-1 w-4 h-4" />
                </div>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Stock Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {paginatedData.map((item) => (
              <tr key={item.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <Package className="w-4 h-4 text-blue-500 mr-2" />
                    <span className="text-sm font-medium text-gray-900">{item.productName}</span>
                  </div>
                </td>
                <td className="px-6 py-4">
                  <div className="text-sm text-gray-900 max-w-xs">
                    {item.productDetails}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-bold text-gray-900">
                    {item.quantity}
                  </div>
                  <div className="text-xs text-gray-500">
                    Min: {item.minStockLevel}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200">
                    {item.category}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <StockLevel quantity={item.quantity} minLevel={item.minStockLevel} />
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleEditProduct(item)}
                      className="text-blue-600 hover:text-blue-800 transition-colors flex items-center"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteProduct(item)}
                      className="text-red-600 hover:text-red-800 transition-colors flex items-center"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="px-6 py-4 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-700">Show:</span>
              <select
                value={itemsPerPage}
                onChange={(e) => {
                  setItemsPerPage(Number(e.target.value));
                  setCurrentPage(1);
                }}
                className="border border-gray-300 px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
              </select>
              <span className="text-sm text-gray-700">per page</span>
            </div>
            <div className="text-sm text-gray-700">
              Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredAndSortedData.length)} of {filteredAndSortedData.length} results
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="px-3 py-1 border border-gray-300 text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              <ChevronLeft className="w-4 h-4 mr-1" />
              Previous
            </button>

            <div className="flex space-x-1">
              {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                const pageNumber = currentPage <= 3 
                  ? index + 1 
                  : currentPage >= totalPages - 2 
                    ? totalPages - 4 + index 
                    : currentPage - 2 + index;
                
                if (pageNumber < 1 || pageNumber > totalPages) return null;
                
                return (
                  <button
                    key={pageNumber}
                    onClick={() => setCurrentPage(pageNumber)}
                    className={`px-3 py-1 text-sm border ${
                      currentPage === pageNumber 
                        ? 'bg-blue-600 text-white border-blue-600' 
                        : 'border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {pageNumber}
                  </button>
                );
              })}
            </div>

            <button
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="px-3 py-1 border border-gray-300 text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
            >
              Next
              <ChevronRight className="w-4 h-4 ml-1" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StockIn;